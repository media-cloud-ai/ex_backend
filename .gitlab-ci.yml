variables:
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: step_flow_test
  BUILD_EMPTY_DIRECTORIES: priv/repo/migrations deps/step_flow/priv/repo/migrations
  CONTAINER_REGISTRY: registry.gitlab.com
  CONTAINER_IMAGE_NAME: media-cloud-ai/backend/ex_backend

services:
  - postgres:14.4-alpine
  - rabbitmq:3.8.14-alpine

stages:
    - test
    - publish

include:
  - project: 'media-cloud-ai/ci/pipelines'
    file: 'elixir/elixir-publish-docker.yml'
  - project: 'media-cloud-ai/ci/pipelines'
    file: 'elixir/elixir-base.yml'

mix_openapi:
  stage: test
  script:
    - mix openapi.backend
    - >
      if [[ $(mix openapi.backend 2>&1
      | grep -wc "warning") -ne 0 ]];
      then echo "Documentation missing !"; exit -1;
      fi

ts_lint:
  image: node:14
  tags:
    - mcai
  before_script:
    - cd ./assets
    - yarn install
    - npm install
  cache:
    paths:
      - node_modules/
  stage: test
  script:
    - npm run lint
  except:
    refs:
      - tags

ts_format:
  image: node:14
  tags:
    - mcai
  before_script:
    - cd ./assets
    - yarn install
    - npm install
  cache:
    paths:
      - node_modules/
  stage: test
  script:
    - npm run format-check
    - echo "Passed style check"
  except:
    refs:
      - tags

mix_audit:sobelow:
  stage: test
  variables:
    - ENV: dev
  script:
    - mix phx.audit

container_scanning:
  image: registry.gitlab.com/security-products/container-scanning:5
  stage: test
  variables:
    # To provide a `vulnerability-allowlist.yml` file, override the GIT_STRATEGY variable in your
    # `.gitlab-ci.yml` file and set it to `fetch`.
    # For details, see the following links:
    # https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#overriding-the-container-scanning-template
    # https://docs.gitlab.com/ee/user/application_security/container_scanning/#vulnerability-allowlisting
    # CS_DEFAULT_BRANCH_IMAGE: $CONTAINER_REGISTRY/$CONTAINER_IMAGE_NAME:$IMAGE_TAG
    DOCKER_IMAGE: registry.gitlab.com/media-cloud-ai/backend/ex_backend:1.5.0
    GIT_STRATEGY: fetch
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [gl-container-scanning-report.json, gl-dependency-scanning-report.json]
  dependencies: []
  before_script:
    - echo "scanning"
  script:
    - gtcs scan
  rules:
    - if: $CONTAINER_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH &&
          $CI_GITLAB_FIPS_MODE == "true" &&
          $CS_ANALYZER_IMAGE !~ /-(fips|ubi)\z/
      variables:
        CS_IMAGE_SUFFIX: -fips
    - if: $CI_COMMIT_BRANCH
